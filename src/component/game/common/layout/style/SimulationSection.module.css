.simulationContainer {
    position: relative;
    border: 1px solid palegoldenrod;
    height: 100%;
    width: 100%;
    overflow: hidden; /* Prevent content from spilling out */
    display: flex;
    flex-direction: column;
}

.fpsCounter {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 14px;
    z-index: 100;
}

.transitionOverlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: black;
    opacity: 0;
    pointer-events: none;
    z-index: 10;
}

.transitioning {
    opacity: 1;
}

.simulationSection {
    background-color: var(--color-bg-primary);
    color: var(--color-text-primary);
    border-radius: var(--borderRadius);
    font-weight: 800;
    border: 10px solid #8b3b3b;
    height: 100%;
    width: 100%;
    display: flex;
    max-width: 800px;
    aspect-ratio: 16 / 9;
    justify-content: center;
    align-items: center;
    border-radius: 2rem;
}

.simulationContainer {
    position: relative;
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
}

.videoContainer {
    position: relative;
    width: 100%;
    height: 100%; /* Take full height of container */
    display: flex;
    justify-content: center;
    align-items: center;
}

.videoCanvas {
    max-width: 100%;
    height: 100%;
    object-fit: contain; /* Maintain aspect ratio while fitting container*/
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
}

.overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: black;
    pointer-events: none;
    opacity: 0;
    z-index: 1;
    will-change: opacity;
}

.errorMessage {
    color: red;
    text-align: center;
    padding: 20px;
    font-weight: bold;
}

.stats {
    position: fixed; /* Change to fixed positioning */
    top: 10px;
    left: 10px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 10px;
    border-radius: 4px;
    font-size: 12px;
    z-index: 1000; /* Ensure it's above the video */
    display: flex;
    flex-direction: column; /* Stack debug info vertically */
    gap: 5px;
}

.stats > div {
    margin: 2px 0;
    white-space: nowrap; /* Prevent text wrapping */
}

.controlsOverlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    z-index: 1001; /* Ensure controls are always on top */
}

.topRightControls {
    position: absolute;
    top: 15px;
    right: 15px;
    display: flex;
    gap: 10px;
    pointer-events: auto;
    z-index: 1001;
}

.controlButton {
    background-color: rgba(0, 0, 0, 0.7);
    color: #e0e0e0; /* Light grey color for the icons */
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
}

.controlButton:hover {
    background-color: rgba(0, 0, 0, 0.9);
    color: #ffffff; /* Pure white on hover */
}

/* Optional: Add a subtle shadow for better visibility */
.controlButton {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Optional: Add a pressed state */
.controlButton:active {
    transform: scale(0.95);
}

.timer {
    font-size: 24px;
    font-weight: bold;
    padding: 8px 16px;
    border-radius: 20px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    min-width: 80px;
    text-align: center;
}

.bettingPhase {
    color: #ffd700; /* Gold color for betting phase */
}

.dealingPhase {
    color: #00ff00; /* Green color for dealing phase */
}

.completedPhase {
    color: #ff4444; /* Red color for completed phase */
}

/* Add animation for last 5 seconds */
@keyframes pulse {
    0% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.1);
    }
    100% {
        transform: scale(1);
    }
}

.timer.timeRunningOut {
    animation: pulse 1s infinite;
    color: #ff0000;
}

.bottomRightTimer {
    position: absolute;
    bottom: 15px;
    right: 15px;
    z-index: 1001;
    pointer-events: auto;
}

/* Update spinnerContainer to work in both contexts */
.spinnerContainer {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.2);
    z-index: 1003;
}

.spinner {
    border: 8px solid #f3f3f3; /* Light grey */
    border-top: 8px solid #3498db; /* Blue */
    border-radius: 50%;
    width: 60px;
    height: 60px;
    animation: spin 1s linear infinite;
}

/* Add keyframes for spinner animation */
@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

.errorMessage,
.loadingMessage {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1002; /* Above everything else */
    background: rgba(0, 0, 0, 0.8);
    padding: 15px;
    border-radius: 4px;
}

.invalidGameContainer {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: black;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1; /* Lower than controls overlay */
}

/* When in invalidGameContainer, make background fully black */
.invalidGameContainer .spinnerContainer {
    background-color: transparent;
}

.topRightControls,
.bottomRightTimer {
    pointer-events: auto; /* Allow interaction with buttons and timer */
}
